{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/web-server/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;;;;;;IAgDd,6BAAiB;;;;IAE9C;;;OAGG;;;;;IAIH,yBAAK;;;;cAAC,IAAa;QACjB,MAAM,CAAC;KACR;IAED;;OAEG;;;;IAEH,wBAAI;;;;QACF,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAMH,6BAAS;;;;;QACP,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,gCAAY;;;;;;cAAC,SAAiB,EAAE,cAAwB;QACtD,MAAM,CAAC;KACR;;gBA5CF,UAAU;;;QAOR,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;0CAGD;;QAKA,OAAO,EAAE;;;;yCAGT;;QAMA,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;YACxB,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,MAAM;SACtB,CAAC;;;wCACW,UAAU;8CAEtB;;QAQA,OAAO,EAAE;;;;iDAGT;;;;;;;;;;;;;;;;;;;;;;IA3CU,SAAS;QAVrB,MAAM,CAAC;YACN,UAAU,EAAE,WAAW;YACvB,MAAM,EAAE,0BAA0B;;YAClC,SAAS,EAAE,kBAAkB;;YAC7B,IAAI,EAAE,uDAAuD;;YAC7D,OAAO,EAAE,EAAE;;YACX,gBAAgB,EAAE,EAAE;;YACpB,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,SAAS,EA6CrB;oBA/FD;EAkD+B,iBAAiB;SAAnC,SAAS","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface Response {\n  status: number;\n  body: string;\n  headers: { [key: string]: string};\n}\n\nexport interface Request {\n  requestId: string;\n  body: string;\n  headers: string;\n  method: 'POST' | 'GET' | 'PUT' | 'PATCH';\n  path: string;\n  query: string;\n}\n\n/**\n * @name Web Server\n * @description\n * This plugin does something\n *\n * @usage\n * ```typescript\n * import { WebServer } from '@ionic-native/web-server';\n *\n *\n * constructor(private webServer: WebServer) { }\n *\n * ...\n *\n *\n * this.webServer.functionName('Hello', 123)\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'WebServer',\n  plugin: 'cordova-plugin-webserver', // npm package name, example: cordova-plugin-camera\n  pluginRef: 'window.webserver', // the variable reference to call the plugin, example: navigator.geolocation\n  repo: 'https://github.com/bykof/cordova-plugin-webserver.git', // the github repository URL for the plugin\n  install: '', // OPTIONAL install command, in case the plugin requires variables\n  installVariables: [], // OPTIONAL the plugin requires variables\n  platforms: ['Android', 'iOS'] // Array of platforms supported, example: ['Android', 'iOS']\n})\n@Injectable()\nexport class WebServer extends IonicNativePlugin {\n\n  /**\n   * This method will start your webserver.\n   * @param port {number} Port number (default to 8080)\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n  })\n  start(port?: number): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  /**\n   * This method will stop your webserver.\n   */\n  @Cordova()\n  stop(): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  /**\n   * This function does something\n   * @return {Observable<Request>} Returns an observable to resolve as a Request object\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    observable: true,\n    clearFunction: 'stop'\n  })\n  onRequest(): Observable<Request> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n  /**\n   * This function does something\n   * @param requestId {string} Request ID to respond to\n   * @param responseObject {Response} Response object\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  sendResponse(requestId: string, responseObject: Response): Promise<any> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n}\n"]}